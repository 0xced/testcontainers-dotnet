{% template Client.Class.Annotations %}
[System.CodeDom.Compiler.GeneratedCode("NSwag", "{{ ToolchainVersion }}")]
{{ ClientClassAccessModifier }} partial class {{ Class }} {% if HasBaseType %}: {% endif %}{% if HasBaseClass %}{{ BaseClass }}{% if GenerateClientInterfaces %}, {% endif %}{% endif %}{% if GenerateClientInterfaces %}I{{ Class }}{% endif %}
{
{% if UseBaseUrl -%}
    #pragma warning disable 8618
    private string _baseUrl;
    #pragma warning restore 8618

{% endif -%}
{% if InjectHttpClient -%}
    private readonly {{ HttpClientType }} _httpClient;
{% endif -%}
{% if UseRequestAndResponseSerializationSettings -%}
    private static readonly Lazy<JsonSerializerOptions> _requestSettings = new Lazy<JsonSerializerOptions>(() => CreateSerializerSettings(true), true);
    private static readonly Lazy<JsonSerializerOptions> _responseSettings = new Lazy<JsonSerializerOptions>(() => CreateSerializerSettings(false), true);
{% else -%}
    private static readonly Lazy<JsonSerializerOptions> _settings = new Lazy<JsonSerializerOptions>(CreateSerializerSettings, true);
{% endif -%}

{% assign constructorParameters = "" -%}
{% if HasConfigurationClass -%}
{%     assign constructorParameters = ConfigurationClass | append: " configuration" -%}
{% endif -%}
{% if UseBaseUrl and HasBaseUrl == false and HasConfigurationClass == false -%}
{%     unless constructorParameters == "" -%}{% assign constructorParameters = constructorParameters | append: ", " -%}{% endunless -%}
{%     assign constructorParameters = constructorParameters | append: "string baseUrl" -%}
{% endif -%}
{% if InjectHttpClient -%}
{%     unless constructorParameters == "" -%}{% assign constructorParameters = constructorParameters | append: ", " -%}{% endunless -%}
{%     assign constructorParameters = constructorParameters | append: HttpClientType | append: " httpClient" -%}
{% endif -%}
    public {{ Class }}({{ constructorParameters }}){% if HasConfigurationClass and HasBaseClass -%}{{ " : base(configuration)"}}{% endif %}
    {
{%     if UseBaseUrl -%}
{%         if HasBaseUrl -%}
{%             if GenerateBaseUrlProperty -%}
        BaseUrl = "{{ BaseUrl }}";
{%             else -%}
{%                 if BaseUrl != "" -%}
{%                     assign baseUrlLength = BaseUrl | size -%}
{%                     assign lastUrlCharIndex = baseUrlLength | minus: 1 -%}
{%                     assign lastUrlChar = BaseUrl | slice: lastUrlCharIndex, 1 -%}
{%                     if lastUrlChar == "/" -%}
        _baseUrl = "{{ BaseUrl }}";
{%                     else -%}
        _baseUrl = "{{ BaseUrl }}/";
{%                     endif -%}
{%                 endif -%}
{%             endif -%}
{%         else -%}
{%             if GenerateBaseUrlProperty -%}
        BaseUrl = baseUrl;
{%             else -%}
{%                 if HasConfigurationClass == false -%}
        _baseUrl = (string.IsNullOrEmpty(baseUrl) || baseUrl.EndsWith("/"))
            ? baseUrl
            : baseUrl + "/";
{%                 endif -%}
{%             endif -%}
{%         endif -%}
{%     endif -%}
{%     if InjectHttpClient -%}
        _httpClient = httpClient;
{%     endif -%}
    {% template Client.Class.Constructor %}
    }

    private static JsonSerializerOptions CreateSerializerSettings({% if UseRequestAndResponseSerializationSettings %}bool isRequest{% endif %})
    {
        var settings = {{ JsonSerializerParameterCode }};
{% if UseSystemTextJson == false and SerializeTypeInformation -%}
        settings.TypeNameHandling = Newtonsoft.Json.TypeNameHandling.Auto;
{% endif -%}
{% if UseSystemTextJson == true and JsonConvertersArrayCode contains "JsonConverter[]" -%}
        var converters = {{ JsonConvertersArrayCode }};
        foreach(var converter in converters)
            settings.Converters.Add(converter);
{% endif -%}
        UpdateJsonSerializerSettings(settings{% if UseRequestAndResponseSerializationSettings %}, isRequest{% endif %});
        return settings;
    }

{% if UseBaseUrl and GenerateBaseUrlProperty -%}
    public string BaseUrl
    {
        get { return _baseUrl; }
        [System.Diagnostics.CodeAnalysis.MemberNotNull(nameof(_baseUrl))]
        set
        {
            _baseUrl = value;
            if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                _baseUrl += '/';
        }
    }

{% endif -%}
{% if ExposeJsonSerializerSettings -%}
{%     assign serializerSettingsAccessModifier = "public" %}
{% else -%}
{%     assign serializerSettingsAccessModifier = "protected" %}
{% endif -%}
{% if UseRequestAndResponseSerializationSettings -%}
    {{ serializerSettingsAccessModifier }} JsonSerializerOptions RequestJsonSerializerSettings => _requestSettings.Value;
    {{ serializerSettingsAccessModifier }} JsonSerializerOptions ResponseJsonSerializerSettings => _responseSettings.Value;
{% else -%}
    {{ serializerSettingsAccessModifier }} JsonSerializerOptions JsonSerializerSettings => _settings.Value;
{% endif -%}

{% if GenerateUpdateJsonSerializerSettingsMethod -%}
{%     if UseRequestAndResponseSerializationSettings -%}
    static partial void UpdateJsonSerializerSettings(JsonSerializerOptions settings, bool isRequest);
{%     else -%}
    static partial void UpdateJsonSerializerSettings(JsonSerializerOptions settings);
{%     endif -%}
{% endif -%}


{% if GeneratePrepareRequestAndProcessResponseAsAsyncMethods == false -%}
    partial void PrepareRequest({{ HttpClientType }} client, HttpRequestMessage request, string url);
    partial void PrepareRequest({{ HttpClientType }} client, HttpRequestMessage request, StringBuilder urlBuilder);
    partial void ProcessResponse({{ HttpClientType }} client, HttpResponseMessage response);
{% endif -%}
{% for operation in Operations %}
{%     if GenerateOptionalParameters == false -%}
    {% template Client.Method.Documentation %}
    {% template Client.Method.Annotations %}
    {{ operation.MethodAccessModifier }} virtual {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
    {
        return {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}CancellationToken.None);
    }

{%     endif -%}
{%     if GenerateSyncMethods -%}
    {% template Client.Method.Documentation %}
    {% template Client.Method.Annotations %}
    {{ operation.MethodAccessModifier }} virtual {{ operation.SyncResultType }} {{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}{% if parameter.IsLast == false %}, {% endif %}{% endfor %})
    {
        {% if operation.HasResult or operation.WrapResponse %}return {% endif %}Task.Run(async () => await {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.VariableName }}, {% endfor %}CancellationToken.None)).GetAwaiter().GetResult();
    }

{%     endif -%}
    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    {% template Client.Method.Documentation %}
    {% template Client.Method.Annotations %}
    {{ operation.MethodAccessModifier }} virtual async {{ operation.ResultType }} {{ operation.ActualOperationName }}Async({% for parameter in operation.Parameters %}{{ parameter.Type }} {{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %} = null{% endif %}, {% endfor %}CancellationToken cancellationToken{% if GenerateOptionalParameters %} = default{% endif %})
    {
{%     for parameter in operation.PathParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
        ArgumentNullException.ThrowIfNull({{ parameter.VariableName }});
{%         endif -%}
{%     endfor -%}
{%     for parameter in operation.QueryParameters -%}
{%         if parameter.IsNullable == false and parameter.IsRequired -%}
        ArgumentNullException.ThrowIfNull({{ parameter.VariableName }});
{%         endif -%}
{%     endfor -%}
{%     if operation.HasContent and operation.ContentParameter.IsRequired -%}
        ArgumentNullException.ThrowIfNull({{ operation.ContentParameter.VariableName }});
{%     endif -%}
{%     if InjectHttpClient -%}
        var client = _httpClient;
{%     elsif UseHttpClientCreationMethod -%}
        var client = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
{%     else -%}
        var client = new {{ HttpClientType }}();
{%     endif -%}
{%     if InjectHttpClient == false and DisposeHttpClient -%}
        var disposeClient = true;
{%     else -%}
        var disposeClient = false;
{%     endif -%}
        try
        {
{%     if UseHttpRequestMessageCreationMethod -%}
            using (var request = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
{%     else -%}
            using (var request = new HttpRequestMessage())
{%     endif -%}
            {
{%     for parameter in operation.HeaderParameters %}
{%         if parameter.IsRequired -%}
                if ({{ parameter.VariableName }} == null)
                    throw new System.ArgumentNullException("{{ parameter.VariableName }}");
                {% template Client.Class.HeaderParameter %}
{%         else -%}
                if ({{ parameter.VariableName }} != null)
                    {% template Client.Class.HeaderParameter %}
{%         endif -%}
{%     endfor -%}
{%     if operation.HasContent -%}
{%         if operation.HasBinaryBodyParameter -%}
{%             if operation.ContentParameter.HasBinaryBodyWithMultipleMimeTypes -%}
                var content = new StreamContent({{ operation.ContentParameter.VariableName }}.Data);
                content.Headers.ContentType = MediaTypeHeaderValue.Parse({{ operation.ContentParameter.VariableName }}.ContentType);
{%             else -%}
                var content = new StreamContent({{ operation.ContentParameter.VariableName }});
                content.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
{%             endif -%}
{%         elsif operation.HasXmlBodyParameter -%}
                var content = new StringContent({{ operation.ContentParameter.VariableName }});
                content.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
{%         elsif operation.ConsumesFormUrlEncoded -%}
                var json = {% if UseSystemTextJson %}JsonSerializer.SerializeToUtf8Bytes{% else %}Newtonsoft.Json.JsonConvert.SerializeObject{% endif %}({{ operation.ContentParameter.VariableName }}, _settings.Value);
                var dictionary_ = {% if UseSystemTextJson %}JsonSerializer.Deserialize{% else %}Newtonsoft.Json.JsonConvert.DeserializeObject{% endif %}<Dictionary<string, string>>(json, _settings.Value);
                var content = new FormUrlEncodedContent(dictionary_);
                content.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
{%         elsif operation.HasPlainTextBodyParameter -%}
                var content = new StringContent({{ operation.ContentParameter.VariableName }});
                content.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
{%         else -%}
                var json = {% if UseSystemTextJson %}JsonSerializer.SerializeToUtf8Bytes{% else %}Newtonsoft.Json.JsonConvert.SerializeObject{% endif %}({{ operation.ContentParameter.VariableName }}, {% if SerializeTypeInformation %}typeof({{ operation.ContentParameter.Type }}), {% endif %}{% if UseRequestAndResponseSerializationSettings %}_requestSettings{% else %}_settings{% endif %}.Value);
                var content = new {% if UseSystemTextJson %}ByteArrayContent{% else %}StringContent{% endif %}(json);
                content.Headers.ContentType = MediaTypeHeaderValue.Parse("{{ operation.Consumes }}");
{%         endif -%}
                request.Content = content;
{%     else -%}
{%         if operation.HasFormParameters -%}
{%             if operation.ConsumesFormUrlEncoded -%}
                var keyValues_ = new List<KeyValuePair<string, string>>();
{%                 for parameter in operation.FormParameters -%}
{%                     if parameter.IsNullable -%}
                if ({{ parameter.VariableName }} != null)
{%                     else -%}
                if ({{ parameter.VariableName }} == null)
                    throw new System.ArgumentNullException("{{ parameter.VariableName }}");
                else
{%                     endif -%}
                    keyValues_.Add(new KeyValuePair<string, string>("{{ parameter.Name }}", ConvertToString({{ parameter.VariableName }}, CultureInfo.InvariantCulture)));
{%                 endfor -%}
                request.Content = new FormUrlEncodedContent(keyValues_);
{%             else -%}
                var boundary_ = System.Guid.NewGuid().ToString();
                var content = new MultipartFormDataContent(boundary_);
                content.Headers.Remove("Content-Type");
                content.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
{%                 for parameter in operation.FormParameters %}
{%                     if parameter.IsNullable -%}
                if ({{ parameter.VariableName }} != null)
{%                     else -%}
                if ({{ parameter.VariableName }} == null)
                    throw new System.ArgumentNullException("{{ parameter.VariableName }}");
                else
{%                     endif -%}
                {
{%                     if parameter.IsFile -%}
{%                         if parameter.IsArray -%}
                    foreach (var item in {{ parameter.VariableName }})
                    {
                        var content{{ parameter.VariableName }}_ = new StreamContent(item.Data);
                        if (!string.IsNullOrEmpty(item.ContentType))
                            content{{ parameter.VariableName }}_.Headers.ContentType = Headers.MediaTypeHeaderValue.Parse(item.ContentType);
                        content.Add(content{{ parameter.VariableName }}_, "{{ parameter.Name }}", item.FileName ?? "{{ parameter.Name }}");
                    }
{%                         else -%}
                    var content{{ parameter.VariableName }}_ = new StreamContent({{ parameter.VariableName }}.Data);
                    if (!string.IsNullOrEmpty({{ parameter.VariableName }}.ContentType))
                        content{{ parameter.VariableName }}_.Headers.ContentType = Headers.MediaTypeHeaderValue.Parse({{ parameter.VariableName }}.ContentType);
                    content.Add(content{{ parameter.VariableName }}_, "{{ parameter.Name }}", {{ parameter.VariableName }}.FileName ?? "{{ parameter.Name }}");
{%                         endif -%}
{%                     elsif parameter.IsArray -%}
                    foreach (var item in {{ parameter.VariableName }})
                    {
                        content.Add(new StringContent(ConvertToString(item, CultureInfo.InvariantCulture)), "{{ parameter.Name }}");
                    }
{%                     elsif parameter.IsObject -%}
                    var json = {% if UseSystemTextJson %}JsonSerializer.SerializeToUtf8Bytes{% else %}Newtonsoft.Json.JsonConvert.SerializeObject{% endif %}({{ parameter.VariableName }}, {% if UseRequestAndResponseSerializationSettings %}_requestSettings{% else %}_settings{% endif %}.Value);
                    content.Add(new {% if UseSystemTextJson %}ByteArrayContent(json{% else %}StringContent(json, Encoding.UTF8, "application/json"{% endif %}), "{{ parameter.Name }}");
{%                     else -%}
                    content.Add(new StringContent(ConvertToString({{ parameter.VariableName }}, CultureInfo.InvariantCulture)), "{{ parameter.Name }}");
{%                     endif -%}
                }
{%                 endfor -%}
                request.Content = content;
{%             endif -%}
{%         elsif operation.IsGetOrDeleteOrHead == false -%}
                request.Content = new StringContent(string.Empty, Encoding.UTF8, "{{ operation.Produces }}");
{%         endif -%}
{%     endif -%}
                request.Method = new HttpMethod("{{ operation.HttpMethodUpper | upcase }}");
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
                request.Headers.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("{{ operation.Produces }}"));
{%     endif -%}

                var urlBuilder = new StringBuilder();
                {% if UseBaseUrl %}if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder.Append(_baseUrl);{% endif %}
                // Operation Path: "{{ operation.Path }}"
{%     if operation.Path contains "{" -%}
{%        assign pathParts = operation.Path | split: "{" -%}
{%        for pathPart in pathParts -%}
{%            if pathPart contains "}" -%}
{%                assign pathParameterParts = pathPart | split: "}" -%}
{%                assign pathParameterFound = true -%}
{%                for parameter in operation.PathParameters -%}
{%                    if parameter.Name == pathParameterParts[0] -%}
{%                        if parameter.IsOptional -%}
{%                            assign pathParameterFound = false -%}
                if ({{ parameter.VariableName }} != null)
                {
                    {% template Client.Class.PathParameter %}
                }
                else
                    if (urlBuilder.Length > 0) urlBuilder.Length--;
{%                        else -%}
                {% template Client.Class.PathParameter %}
{%                        endif -%}
{%                    endif -%}
{%                endfor -%}
{%                comment -%} >>> just in case {% endcomment -%}
{%                unless pathParameterFound -%}
                urlBuilder.Append("{{ '{' }}{{ pathParameterParts[0] }}{{ '}' }}");
{%                endunless -%}
{%                comment -%} <<< just in case {% endcomment -%}
{%                assign nonParameterPartLengh = pathParameterParts[1] | size -%}
{%                if nonParameterPartLengh == 1 -%}
                urlBuilder.Append('{{ pathParameterParts[1] }}');
{%                elsif nonParameterPartLengh > 0 -%}
                urlBuilder.Append("{{ pathParameterParts[1] }}");
{%                endif -%}
{%            else -%}
{%                 unless pathPart == "" -%}
                urlBuilder.Append("{{ pathPart }}");
{%                 endunless -%}
{%            endif -%}
{%        endfor -%}
{%    else -%}
{%        unless operation.Path == "" -%}
                urlBuilder.Append("{{ operation.Path }}");
{%        endunless -%}
{%    endif -%}
{%     if operation.HasQueryParameters -%}
                urlBuilder.Append('?');
{%         for parameter in operation.QueryParameters -%}
{%             if parameter.IsOptional -%}
                if ({{ parameter.VariableName }} != null)
                {
                    {% template Client.Class.QueryParameter %}
                }
{%             else -%}
                {% template Client.Class.QueryParameter %}
{%             endif -%}
{%         endfor -%}
                urlBuilder.Length--;
{%     endif -%}

{% if GeneratePrepareRequestAndProcessResponseAsAsyncMethods %}
                await PrepareRequestAsync(client, request, urlBuilder, cancellationToken).ConfigureAwait(false);
{% else -%}
                PrepareRequest(client, request, urlBuilder);
{% endif -%}

                var url = urlBuilder.ToString();
                request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);

{% if GeneratePrepareRequestAndProcessResponseAsAsyncMethods -%}
                await PrepareRequestAsync(client, request, url, cancellationToken).ConfigureAwait(false);
{% else -%}
                PrepareRequest(client, request, url);
{% endif -%}
                {% template Client.Class.BeforeSend %}

                var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                var disposeResponse = true;
                try
                {
                    var headers = new Dictionary<string, IEnumerable<string>>();
                    foreach (var item in response.Headers)
                        headers[item.Key] = item.Value;
                    foreach (var item in response.Content.Headers)
                        headers[item.Key] = item.Value;
{% if GeneratePrepareRequestAndProcessResponseAsAsyncMethods %}
                    await ProcessResponseAsync(client, response, cancellationToken).ConfigureAwait(false);
{% else %}
                    ProcessResponse(client, response);
{% endif %}
                    var statusCode = (int)response.StatusCode;
{%     for response in operation.Responses -%}
                    if (statusCode == {{ response.StatusCode }}{% if response.CheckChunkedStatusCode %} || statusCode == 206{% endif %})
                    {
                        {% template Client.Class.ProcessResponse %}
                    }
                    else
{%     endfor -%}
{%     if operation.HasDefaultResponse -%}
{%         if operation.DefaultResponse.HasType -%}
                    {
{%             assign response = operation.DefaultResponse -%}
                        {% template Client.Class.ProcessResponse %}
                    }
{%         elsif operation.HasSuccessResponse -%}
                    {
                        var responseData = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                        throw new {{ ExceptionClass }}("{{ operation.DefaultResponse.ExceptionDescription }}", statusCode, responseData, headers, null);
                    }
{%        elsif operation.HasResultType -%}
{%             if operation.WrapResponse and operation.UnwrappedResultType != "FileResponse" %}
                    return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(statusCode, headers, {{ operation.UnwrappedResultDefaultValue }});
{%             else -%}
                    return {{ operation.UnwrappedResultDefaultValue }};
{%             endif -%}
{%         elsif operation.WrapResponse -%}
                    return new {{ ResponseClass }}(statusCode, headers);
{%         endif -%}
{%     else -%}
{%         if operation.HasSuccessResponse == false -%}
{% comment -%}
    If the success response has already been explicitely declared, there is no need for this default code (because handled above).
    Otherwise, return default values on success because we don't want to throw on "unknown statusCode code".
    Success is always expected
{%- endcomment %}
                    if (statusCode is 200 or 204)
                    {
{%             if operation.HasResultType -%}
{%                 if operation.WrapResponse and operation.UnwrappedResultType != "FileResponse" %}
                        return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(statusCode, headers, {{ operation.UnwrappedResultDefaultValue }});
{%                 else -%}
                        return {{ operation.UnwrappedResultDefaultValue }};
{%                 endif -%}
{%             elsif operation.WrapResponse -%}
                        return new {{ ResponseClass }}(statusCode, headers);
{%             else -%}{% comment %} This method isn't expected to return a value. Just return. {% endcomment %}
                        return;
{%             endif -%}
                    }
                    else
{%         endif -%}
                    {
                        var responseData = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
                        throw new {{ ExceptionClass }}("The HTTP statusCode code of the response was not expected (" + statusCode + ").", statusCode, responseData, headers, null);
                    }
{%     endif -%}
                }
                finally
                {
                    if (disposeResponse)
                        response.Dispose();
                }
            }
        }
        finally
        {
            if (disposeClient)
                client.Dispose();
        }
    }

{% endfor %}
    protected struct ObjectResponseResult<T>
    {
        public ObjectResponseResult(T responseObject, string responseText)
        {
            Object = responseObject;
            Text = responseText;
        }

        public T Object { get; }

        public string Text { get; }
    }

    {% template Client.Class.ReadObjectResponse %}

    {% template Client.Class.ConvertToString %}
    {% template Client.Class.Body %}
}
