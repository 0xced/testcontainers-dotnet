{% if response.HasType -%}
{%     if response.IsFile -%}
{%         if response.IsSuccess -%}
var responseStream = await response.Content.ReadAsStreamAsync(cancellationToken).ConfigureAwait(false);
var fileResponse = new FileResponse(statusCode, headers, responseStream, response);
disposeClient = false; disposeResponse = false; // response and client are disposed by FileResponse
return fileResponse;
{%         else -%}
var objectResponse = await ReadObjectResponseAsync<{{ response.Type }}>(response, headers, cancellationToken).ConfigureAwait(false);
throw new {{ ExceptionClass }}<{{ response.Type }}>("{{ response.ExceptionDescription }}", statusCode, objectResponse.Text, headers, objectResponse.Object, null);
{%         endif -%}
{%     elsif response.IsPlainText -%}
var responseData = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
var result = ({{ response.Type }})Convert.ChangeType(responseData, typeof({{ response.Type }}));
{%         if response.IsSuccess -%}
{%             if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(statusCode, headers, result);
{%             else -%}
return result;
{%             endif -%}
{%         else -%}
throw new {{ ExceptionClass }}<{{ response.Type }}>("{{ response.ExceptionDescription }}", statusCode, responseData, headers, result, null);
{%         endif -%}
{%     else -%}
var objectResponse = await ReadObjectResponseAsync<{{ response.Type }}>(response, headers, cancellationToken).ConfigureAwait(false);
{%         if response.IsNullable == false -%}
if (objectResponse.Object == null)
{
    throw new {{ ExceptionClass }}("Response was null which was not expected.", statusCode, objectResponse.Text, headers, null);
}
{%         endif -%}
{%         if response.IsSuccess -%}
{%             if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(statusCode, headers, objectResponse.Object);
{%             else -%}
return objectResponse.Object;
{%             endif -%}
{%         endif -%}
{%         if response.IsSuccess == false -%}
{%             if response.InheritsExceptionSchema -%}
var responseObject_ = objectResponse.Object != null ? objectResponse.Object : new {{ response.Type }}();
responseObject_.Data.Add("HttpStatus", statusCode.ToString());
responseObject_.Data.Add("HttpHeaders", headers);
responseObject_.Data.Add("HttpResponse", objectResponse.Text);
{%                 if WrapDtoExceptions -%}
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", statusCode, objectResponse.Text, headers, responseObject_);
{%                 else -%}
throw responseObject_;
{%                 endif -%}
{%             else -%}
throw new {{ ExceptionClass }}<{{ response.Type }}>("{{ response.ExceptionDescription }}", statusCode, objectResponse.Text, headers, objectResponse.Object, null);
{%             endif -%}
{%         endif -%}
{%     endif -%}
{% elsif response.IsSuccess -%}
{%     if operation.HasResultType -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}<{{ operation.UnwrappedResultType }}>(statusCode, headers, {{ operation.UnwrappedResultDefaultValue }});
{%         else -%}
return {{ operation.UnwrappedResultDefaultValue }};
{%         endif -%}
{%     else -%}
{%         if operation.WrapResponse -%}
return new {{ ResponseClass }}(statusCode, headers);
{%         else -%}
return;
{%         endif -%}
{%     endif -%}
{% else -%}{% comment %} implied: `if !response.HasType` so just read it as text {% endcomment %}
string responseText = await response.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);
throw new {{ ExceptionClass }}("{{ response.ExceptionDescription }}", statusCode, responseText, headers, null);
{% endif %}